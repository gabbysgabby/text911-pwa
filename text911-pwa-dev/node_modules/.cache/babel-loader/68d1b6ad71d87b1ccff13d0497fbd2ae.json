{"ast":null,"code":"import _classCallCheck from \"/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/src/components/Common/SwipeableButton.js\";\nimport React, { Component } from 'react';\nimport './SwipeableButton.css';\nvar slider = React.createRef();\nvar container = React.createRef();\nvar isTouchDevice = 'ontouchstart' in document.documentElement;\n\nvar SwipeableButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SwipeableButton, _Component);\n\n  function SwipeableButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SwipeableButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SwipeableButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.onDrag = function (e) {\n      if (_this.unmounted || _this.state.unlocked) return;\n\n      if (_this.isDragging) {\n        if (isTouchDevice) {\n          _this.sliderLeft = Math.min(Math.max(0, e.touches[0].clientX - _this.startX), _this.containerWidth);\n        } else {\n          _this.sliderLeft = Math.min(Math.max(0, e.clientX - _this.startX), _this.containerWidth);\n        }\n\n        _this.updateSliderStyle();\n      }\n    };\n\n    _this.updateSliderStyle = function () {\n      if (_this.unmounted || _this.state.unlocked) return;\n      slider.current.style.left = _this.sliderLeft + 50 + 'px';\n    };\n\n    _this.stopDrag = function () {\n      if (_this.unmounted || _this.state.unlocked) return;\n\n      if (_this.isDragging) {\n        _this.isDragging = false;\n\n        if (_this.sliderLeft > _this.containerWidth * 0.9) {\n          _this.sliderLeft = _this.containerWidth;\n\n          if (_this.props.onSuccess) {\n            _this.props.onSuccess();\n\n            _this.onSuccess();\n          }\n        } else {\n          _this.sliderLeft = 0;\n\n          if (_this.props.onFailure) {\n            _this.props.onFailure();\n          }\n        }\n\n        _this.updateSliderStyle();\n      }\n    };\n\n    _this.startDrag = function (e) {\n      if (_this.unmounted || _this.state.unlocked) return;\n      _this.isDragging = true;\n\n      if (isTouchDevice) {\n        _this.startX = e.touches[0].clientX;\n      } else {\n        _this.startX = e.clientX;\n      }\n    };\n\n    _this.onSuccess = function () {\n      console.log('there'); // container.current.style.width = container.current.clientWidth+'px';\n\n      _this.setState({\n        unlocked: true\n      });\n    };\n\n    _this.getText = function () {\n      return _this.state.unlocked ? _this.props.text_unlocked || 'UNLOCKED' : _this.props.text || 'SLIDE';\n    };\n\n    _this.reset = function () {\n      if (_this.unmounted) return;\n\n      _this.setState({\n        unlocked: false\n      }, function () {\n        _this.sliderLeft = 0;\n\n        _this.updateSliderStyle();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SwipeableButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (isTouchDevice) {\n        document.addEventListener('touchmove', this.onDrag);\n        document.addEventListener('touchend', this.stopDrag);\n      } else {\n        document.addEventListener('mousemove', this.onDrag);\n        document.addEventListener('mouseup', this.stopDrag);\n      }\n\n      this.containerWidth = container.current.clientWidth - 50;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"ReactSwipeButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'rsbContainer ' + (this.state.unlocked ? 'rsbContainerUnlocked' : ''),\n        ref: container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rsbcSlider\",\n        ref: slider,\n        onMouseDown: this.startDrag,\n        style: {\n          background: this.props.color\n        },\n        onTouchStart: this.startDrag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"rsbcSliderText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.props.text), React.createElement(\"span\", {\n        className: \"rsbcSliderArrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"rsbcSliderCircle\",\n        style: {\n          background: this.props.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"rsbcText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.getText())));\n    }\n  }]);\n\n  return SwipeableButton;\n}(Component);\n\nexport { SwipeableButton as default };","map":{"version":3,"sources":["/Users/Gabby/Downloads/text911-pwa-dev/Downloads/text911-pwa-feature-swipe-btn-3/src/components/Common/SwipeableButton.js"],"names":["React","Component","slider","createRef","container","isTouchDevice","document","documentElement","SwipeableButton","state","onDrag","e","unmounted","unlocked","isDragging","sliderLeft","Math","min","max","touches","clientX","startX","containerWidth","updateSliderStyle","current","style","left","stopDrag","props","onSuccess","onFailure","startDrag","console","log","setState","getText","text_unlocked","text","reset","addEventListener","clientWidth","background","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './SwipeableButton.css'\n\nconst slider = React.createRef();\nconst container = React.createRef();\nconst isTouchDevice = 'ontouchstart' in document.documentElement\n\nexport default class SwipeableButton extends Component {\n  state = {}\n\n  componentDidMount() {\n    if (isTouchDevice) {\n      document.addEventListener('touchmove', this.onDrag);\n      document.addEventListener('touchend', this.stopDrag);\n    } else {\n      document.addEventListener('mousemove', this.onDrag);\n      document.addEventListener('mouseup', this.stopDrag);\n    }\n    this.containerWidth = container.current.clientWidth - 50;\n  }\n\n  onDrag = (e) => {\n    if (this.unmounted || this.state.unlocked) return;\n    if (this.isDragging) {\n      if (isTouchDevice) {\n        this.sliderLeft = Math.min(Math.max(0, e.touches[0].clientX - this.startX), this.containerWidth);\n      } else {\n        this.sliderLeft = Math.min(Math.max(0, e.clientX - this.startX), this.containerWidth);\n      }\n      this.updateSliderStyle();\n    }\n  }\n\n  updateSliderStyle = () => {\n    if (this.unmounted || this.state.unlocked) return;\n    slider.current.style.left = (this.sliderLeft + 50)+'px';\n  }\n\n  stopDrag = () => {\n    if (this.unmounted || this.state.unlocked) return;\n    if (this.isDragging) {\n      this.isDragging = false;\n      if (this.sliderLeft > this.containerWidth * 0.9) {\n        this.sliderLeft = this.containerWidth;\n        if (this.props.onSuccess) {\n          this.props.onSuccess();\n          this.onSuccess();\n        }\n      } else {\n        this.sliderLeft = 0;\n        if (this.props.onFailure) {\n          this.props.onFailure();\n        }\n      }\n      this.updateSliderStyle();\n    }\n  }\n\n  startDrag = (e) => {\n    if (this.unmounted || this.state.unlocked) return;\n    this.isDragging = true;\n    if (isTouchDevice) {\n      this.startX = e.touches[0].clientX;\n    } else {\n      this.startX = e.clientX;\n    }\n  }\n\n  onSuccess = () => {\n    console.log('there')\n    // container.current.style.width = container.current.clientWidth+'px';\n    this.setState({\n      unlocked: true\n    })\n  }\n\n  getText = () => {\n    return this.state.unlocked ? (this.props.text_unlocked || 'UNLOCKED') : (this.props.text || 'SLIDE')\n  }\n\n  reset = () => {\n    if (this.unmounted) return;\n    this.setState({ unlocked: false }, () => {\n      this.sliderLeft = 0;\n      this.updateSliderStyle();\n    });\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    return (\n      <div className='ReactSwipeButton'>\n        <div className={'rsbContainer ' + (this.state.unlocked ? 'rsbContainerUnlocked' : '')} ref={container}>\n          <div className='rsbcSlider'\n            ref={slider}\n            onMouseDown={this.startDrag}\n            style={{background: this.props.color}}\n            onTouchStart={this.startDrag}>\n            <span className='rsbcSliderText'>{this.props.text}</span>\n            <span className='rsbcSliderArrow'></span>\n            <span className='rsbcSliderCircle' style={{background: this.props.color}}></span>\n          </div>\n          <div className='rsbcText'>{this.getText()}</div>\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}